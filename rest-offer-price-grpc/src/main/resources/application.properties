#quarkus.http.port=8095
%dev.quarkus.http.port=8097
%test.quarkus.http.port=8099


quarkus.grpc.server.port=9010
quarkus.grpc.clients.offerprice.host=localhost
quarkus.grpc.clients.offerprice.port=9010
#%test.quarkus.grpc.clients.hello.port=9001
%test.quarkus.grpc.clients.offerprice.port=9001
quarkus.grpc.server.enable-reflection-service=true


# datasource configuration
quarkus.datasource.db-kind = postgresql
quarkus.datasource.username = ${OFR_USERNAME:postgres}
quarkus.datasource.password = ${OFR_PASSWORD:mysecretpassword}
quarkus.datasource.jdbc.url = jdbc:postgresql://${OFR_HOSTNAME:localhost}:${OFR_PORT:5432}/${OFR_DBNAME:offerdb}
# drop and create the database at startup (use `update` to only update the schema)
quarkus.hibernate-orm.database.generation=drop-and-create

# Default datasource
%dev.quarkus.hibernate-orm.database.generation = drop-and-create
%dev.quarkus.hibernate-orm.sql-load-script = insert_offer_price.sql

%dev-with-data.quarkus.hibernate-orm.database.generation = update
%dev-with-data.quarkus.hibernate-orm.sql-load-script = insert_offer_price.sql

%prod.quarkus.hibernate-orm.database.generation = drop-and-create
%prod.quarkus.hibernate-orm.sql-load-script = insert_offer_price.sql

## Kubernetes

quarkus.container-image.registry=docker.io
quarkus.container-image.group=kmmraj
quarkus.container-image.name=offer-price-api
quarkus.container-image.tag=1.0.2-SNAPSHOT
quarkus.kubernetes.version=v2
quarkus.kubernetes.labels.version=v2
quarkus.container-image.push=true
quarkus.kubernetes.image-pull-policy=if-not-present
#quarkus.kubernetes.match-labels.version=v1
#quarkus.kubernetes.add-version-to-label-selectors=false
quarkus.kubernetes.add-build-timestamp=false
quarkus.kubernetes.deployment-target=kubernetes

quarkus.kubernetes-client.generate-rbac=false
quarkus.kubernetes.namespace=istio-system
quarkus.kubernetes.service-type=cluster-ip


quarkus.kubernetes.env.fields."my-pod-name"=metadata.name
#quarkus.kubernetes.env.configmaps=offer-api-config-map
#quarkus.kubernetes.env.secrets=offer-api-secret
quarkus.kubernetes.env.mapping."ofr-dbname".from-configmap=offer-api-config-map
quarkus.kubernetes.env.mapping."ofr-dbname".with-key=OFR_DBNAME
quarkus.kubernetes.env.mapping."ofr-hostname".from-configmap=offer-api-config-map
quarkus.kubernetes.env.mapping."ofr-hostname".with-key=OFR_HOSTNAME
quarkus.kubernetes.env.mapping."ofr-port".from-configmap=offer-api-config-map
quarkus.kubernetes.env.mapping."ofr-port".with-key=OFR_PORT
quarkus.kubernetes.env.mapping."ofr-username".from-configmap=offer-api-config-map
quarkus.kubernetes.env.mapping."ofr-username".with-key=OFR_USERNAME
quarkus.kubernetes.env.mapping."ofr-password".from-secret=offer-api-secret
quarkus.kubernetes.env.mapping."ofr-password".with-key=OFR_PASSWORD


#quarkus.kubernetes.env.vars.OFR_HOSTNAME=offer-api-config-map.OFR_HOSTNAME
#quarkus.kubernetes.env.vars.OFR_PORT=offer-api-config-map.OFR_PORT
#quarkus.kubernetes.env.vars.OFR_DBNAME=offer-api-config-map.OFR_DBNAME
#quarkus.kubernetes.env.vars.OFR_USERNAME=offer-api-config-map.OFR_USERNAME
#quarkus.kubernetes.env.vars.OFR_PASSWORD=offer-api-secret.OFR_PASSWORD
#quarkus.kubernetes.env.mapping.ofr-dbname.from-config-map=offer-api-config-map
#quarkus.kubernetes.env.mapping.ofr-dbname.key=ofr-dbname


## Gelf

quarkus.log.handler.gelf.enabled=true
quarkus.log.handler.gelf.host=localhost
quarkus.log.handler.gelf.port=50000
quarkus.log.handler.gelf.include-full-mdc=true
#quarkus.log.handler.gelf.port=5044



